# fastlane/Fastlane

default_platform(:ios)

platform :ios do
  desc "TestServerDebug"
  lane :test do |options|
    app_store_connect_api_key(
      key_id: "TJF5UX9U83",
      issuer_id: "b8379a9f-ebd0-49b8-b4fb-ea5d7f96c664",
      key_filepath: "./AuthKey_TJF5UX9U83.p8"
    )

    current_build = increment_build_number(
      build_number: latest_testflight_build_number + 1,
      xcodeproj: "Pulse.xcodeproj"
    )

    current_version = get_version_number(xcodeproj: "Pulse.xcodeproj", target: "Pulse")
    build_app(
      scheme: "TestServerDebug",
      include_bitcode: true,
      export_method: "app-store"
    )

    isTestflightSuccess = 1
    begin
      upload_to_testflight(
        distribute_external: false
      )
    rescue => ex
      isTestflightSuccess = 0
      UI.important('Upload to TestFlight failed, but continuing anyway!')
    end

    tag = "v"+current_version+"-"+current_build+"-TestDebug"
    if isTestflightSuccess != 0
      begin
        add_git_tag(tag: tag)
        push_git_tags(tag: last_git_tag)
      rescue => ex
        UI.important("Push git tags failed, but continuing anyway!")
      end
    
      upload_dsyms
    end
  end
  
  desc "ReleaseServerDebug"
  lane :release_debug do |options|
    app_store_connect_api_key(
      key_id: "TJF5UX9U83",
      issuer_id: "b8379a9f-ebd0-49b8-b4fb-ea5d7f96c664",
      key_filepath: "./AuthKey_TJF5UX9U83.p8"
    )

    current_build = increment_build_number(
      build_number: latest_testflight_build_number + 1,
      xcodeproj: "Pulse.xcodeproj"
    )

    current_version = get_version_number(xcodeproj: "Pulse.xcodeproj", target: "Pulse")
    build_app(
      scheme: "ReleaseServerDebug",
      include_bitcode: true,
      export_method: "app-store"
    )

    isTestflightSuccess = 1
    begin
      upload_to_testflight(
        distribute_external: false
      )
    rescue => ex
      isTestflightSuccess = 0
      UI.important('Upload to TestFlight failed, but continuing anyway!')
    end

    tag = "v"+current_version+"-"+current_build+"-ReleaseDebug"
    if isTestflightSuccess != 0
      begin
        add_git_tag(tag: tag)
        push_git_tags(tag: last_git_tag)
      rescue => ex
        UI.important("Push git tags failed, but continuing anyway!")
      end
    
      upload_dsyms
    end
  end

  desc "ReleaseServerProd"
  lane :release_prod do |options|
    app_store_connect_api_key(
      key_id: "TJF5UX9U83",
      issuer_id: "b8379a9f-ebd0-49b8-b4fb-ea5d7f96c664",
      key_filepath: "./AuthKey_TJF5UX9U83.p8"
    )

    current_build = increment_build_number(
      build_number: latest_testflight_build_number + 1,
      xcodeproj: "Pulse.xcodeproj"
    )

    current_version = get_version_number(xcodeproj: "Pulse.xcodeproj", target: "Pulse")
    build_app(
      scheme: "ReleaseServerProd",
      include_bitcode: true,
      export_method: "app-store"
    )

    isTestflightSuccess = 1
    begin
      upload_to_testflight(
        distribute_external: true,
        notify_external_testers: true,
        groups: ["Testing by URL"]
      )
    rescue => ex
      isTestflightSuccess = 0
      UI.important('Upload to TestFlight failed, but continuing anyway!')
    end

    tag = "v"+current_version+"-"+current_build+"-ReleaseDebug"
    if isTestflightSuccess != 0
      begin
        add_git_tag(tag: tag)
        push_git_tags(tag: last_git_tag)
      rescue => ex
        UI.important("Push git tags failed, but continuing anyway!")
      end
    
      upload_dsyms
    end
  end
    
  desc "Upload dSYMs"
  lane :upload_dsyms do
    upload_symbols_to_crashlytics(dsym_path: "./Pulse.app.dSYM.zip")
  end

  after_all do |lane|
    notification(subtitle: "Fastlane succeeded", message: "#{lane}")
    clean_build_artifacts
  end

  after_all do |lane, exception|
    notification(subtitle: "Fastlane failed", message: "#{lane}")
    clean_build_artifacts
  end
end